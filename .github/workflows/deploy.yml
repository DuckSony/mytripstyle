# GitHub Actions 워크플로우 - Firebase 배포
name: Deploy to Firebase

# 배포 트리거 설정
on:
  push:
    branches: [ main ]  # main 브랜치에 푸시될 때 실행
  workflow_dispatch:    # 수동 실행 옵션 추가

# 환경 변수 설정
env:
  NODE_VERSION: '16'
  WORKING_DIRECTORY: '.'

# 권한 설정
permissions:
  contents: read
  id-token: write # Firebase 서비스 계정에 필요

# 작업 정의
jobs:
  build_and_deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    
    steps:
      # 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3
        
      # Node.js 설정
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '${{ env.WORKING_DIRECTORY }}/package-lock.json'
          
      # 종속성 설치
      - name: Install dependencies
        run: npm ci
        working-directory: ${{ env.WORKING_DIRECTORY }}
        
      # 환경 변수 파일 생성
      - name: Create .env file
        run: |
          echo "REACT_APP_FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }}" > .env.production
          echo "REACT_APP_FIREBASE_AUTH_DOMAIN=${{ secrets.FIREBASE_AUTH_DOMAIN }}" >> .env.production
          echo "REACT_APP_FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}" >> .env.production
          echo "REACT_APP_FIREBASE_STORAGE_BUCKET=${{ secrets.FIREBASE_STORAGE_BUCKET }}" >> .env.production
          echo "REACT_APP_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}" >> .env.production
          echo "REACT_APP_FIREBASE_APP_ID=${{ secrets.FIREBASE_APP_ID }}" >> .env.production
          echo "REACT_APP_FIREBASE_MEASUREMENT_ID=${{ secrets.FIREBASE_MEASUREMENT_ID }}" >> .env.production
          echo "REACT_APP_MAPS_API_KEY=${{ secrets.MAPS_API_KEY }}" >> .env.production
          echo "REACT_APP_WEATHER_API_KEY=${{ secrets.WEATHER_API_KEY }}" >> .env.production
          echo "REACT_APP_API_URL=${{ secrets.API_URL }}" >> .env.production
          echo "REACT_APP_DEFAULT_LOCATION_LAT=37.5642135" >> .env.production
          echo "REACT_APP_DEFAULT_LOCATION_LNG=127.0016985" >> .env.production
          echo "REACT_APP_DEFAULT_ZOOM=13" >> .env.production
          echo "REACT_APP_ENABLE_WEATHER=true" >> .env.production
          echo "REACT_APP_ENABLE_MULTI_AGENT=false" >> .env.production
          echo "REACT_APP_ENABLE_ANALYTICS=true" >> .env.production
          echo "REACT_APP_CACHE_TTL=86400" >> .env.production
          echo "REACT_APP_MAX_PLACES_PER_REQUEST=20" >> .env.production
          echo "REACT_APP_ERROR_REPORTING=true" >> .env.production
          echo "REACT_APP_ERROR_LOG_LEVEL=error" >> .env.production
        working-directory: ${{ env.WORKING_DIRECTORY }}
          
      # 린트 검사 (선택 사항)
      - name: Run linting
        run: npm run lint
        working-directory: ${{ env.WORKING_DIRECTORY }}
        continue-on-error: true
    
      # 단위 테스트 실행 (선택 사항)
      - name: Run tests
        run: npm test
        working-directory: ${{ env.WORKING_DIRECTORY }}
        continue-on-error: true
    
      # 빌드
      - name: Build project
        run: npm run build
        working-directory: ${{ env.WORKING_DIRECTORY }}
        env:
          NODE_ENV: production
      
      # Firebase CLI 설치
      - name: Install Firebase CLI
        run: npm install -g firebase-tools
  
      # Firebase Cloud Functions 종속성 설치
      - name: Install Firebase Functions dependencies
        run: npm ci
        working-directory: ${{ env.WORKING_DIRECTORY }}/functions
  
      # Firebase 배포
      - name: Deploy to Firebase
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          channelId: live
          projectId: ${{ secrets.FIREBASE_PROJECT_ID }}
    
      # Cloud Functions 배포 (별도 단계)
      - name: Deploy Cloud Functions
        run: firebase deploy --only functions --token "${{ secrets.FIREBASE_TOKEN }}" --project "${{ secrets.FIREBASE_PROJECT_ID }}"
        working-directory: ${{ env.WORKING_DIRECTORY }}

      # Firestore 및 Storage 규칙 배포
      - name: Deploy Firestore and Storage rules
        run: firebase deploy --only firestore:rules,storage:rules --token "${{ secrets.FIREBASE_TOKEN }}" --project "${{ secrets.FIREBASE_PROJECT_ID }}"
        working-directory: ${{ env.WORKING_DIRECTORY }}

      # 배포 완료 알림 (선택 사항 - Slack, Discord 등)
      - name: Notify deployment
        uses: rtCamp/action-slack-notify@v2
        if: always()
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: ${{ job.status }}
          SLACK_ICON: https://github.com/rtCamp.png?size=48
          SLACK_MESSAGE: 'MyTripStyle 프로덕션 배포 ${{ job.status }}'
          SLACK_TITLE: 배포 결과
          SLACK_USERNAME: GitHub Actions
        continue-on-error: true
