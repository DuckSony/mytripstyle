name: MyTripStyle CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: '배포 환경 선택'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '16'
  REACT_APP_ENV: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}

jobs:
  build:
    name: 빌드 및 테스트
    runs-on: ubuntu-latest
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v3

      - name: Node.js ${{ env.NODE_VERSION }} 설정
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 의존성 설치
        run: npm ci
      
      - name: 린트 검사
        run: npm run lint
        continue-on-error: true
      
      - name: 단위 테스트 실행
        run: npm test -- --coverage
      
      - name: 테스트 커버리지 보고서 생성
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 빌드
        run: npm run build
        env:
          REACT_APP_ENV: ${{ env.REACT_APP_ENV }}
          REACT_APP_FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
          REACT_APP_FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
          REACT_APP_FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          REACT_APP_FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
          REACT_APP_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
          REACT_APP_FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
          REACT_APP_OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          # REACT_APP_WEATHER_API_KEY: ${{ secrets.WEATHER_API_KEY }}
          # REACT_APP_SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
      
      - name: 빌드 아티팩트 저장
        uses: actions/upload-artifact@v2
        with:
          name: build-files
          path: build/
          retention-days: 1
      
      # - name: 빌드 성공 알림
      #   if: success()
      #   uses: slackapi/slack-github-action@v1
      #   with:
      #     payload: |
      #       {
      #         "text": "✅ MyTripStyle 빌드가 완료되었습니다.\n커밋: ${{ github.event.head_commit.message }}\n빌드자: ${{ github.actor }}"
      #       }
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  deploy-staging:
    name: 스테이징 환경 배포
    needs: build
    if: |
      success() && 
      (github.ref == 'refs/heads/develop' || 
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging'))
    runs-on: ubuntu-latest
    # environment 설정 주석 처리
    # environment:
    #   name: staging
    #   url: https://mytripstyle-627112795738.asia-east1.run.app
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v3
      
      - name: 빌드 아티팩트 다운로드
        uses: actions/download-artifact@v2
        with:
          name: build-files
          path: build
      
      - name: Firebase CLI 설정
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_STAGING }}'
          projectId: my-trip-style-staging
          channelId: live
        env:
          FIREBASE_CLI_PREVIEWS: hostingchannels
      
      # - name: 배포 성공 알림
      #   if: success()
      #   uses: slackapi/slack-github-action@v1
      #   with:
      #     payload: |
      #       {
      #         "text": "✅ MyTripStyle 스테이징 환경 배포가 완료되었습니다.\n커밋: ${{ github.event.head_commit.message }}\n배포자: ${{ github.actor }}"
      #       }
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # deploy-production:
  #   name: 프로덕션 환경 배포
  #   needs: build
  #   if: |
  #     success() && 
  #     (github.ref == 'refs/heads/main' || 
  #     (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'))
  #   runs-on: ubuntu-latest
  #   # environment:
  #   #   name: production
  #   #   url: https://mytripstyle-627112795738.asia-east1.run.app
  #   steps:
  #     - name: 코드 체크아웃
  #       uses: actions/checkout@v3
  #     
  #     - name: 빌드 아티팩트 다운로드
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: build-files
  #         path: build
  #     
  #     - name: Firebase CLI 설정
  #       uses: FirebaseExtended/action-hosting-deploy@v0
  #       with:
  #         repoToken: '${{ secrets.GITHUB_TOKEN }}'
  #         firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_PROD }}'
  #         projectId: my-trip-style-prod
  #         channelId: live
  #       env:
  #         FIREBASE_CLI_PREVIEWS: hostingchannels

  # cloudflare-purge:
  #   name: CDN 캐시 무효화
  #   needs: [deploy-staging, deploy-production]
  #   if: |
  #     always() &&
  #     (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: CloudFlare 캐시 무효화
  #       uses: jakejarvis/cloudflare-purge-action@master
  #       env:
  #         CLOUDFLARE_ZONE: ${{ secrets.CLOUDFLARE_ZONE }}
  #         CLOUDFLARE_TOKEN: ${{ secrets.CLOUDFLARE_TOKEN }}

  notify-failure:
    name: 실패 알림
    needs: [build, deploy-staging]
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: 실패 메시지 출력
        run: echo "워크플로우 실행이 실패했습니다."
